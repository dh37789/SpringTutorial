<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">
	<!-- 
		클라이언트가 first 확장자로 요청시 해당 요청을 처리하는 백엔드 컨트롤러를 빈등록
		* 스프링 프레임웍 내에서 활용되는 모든 자원들은 빈 등록이 필수.
	 	1. 백엔드 컨트롤러
	 	  1.1 설정파일에 빈으로 등록
	 	  1.2 클래스 상단에 @Controller가  설정
	 	  
	 	2. 어노테이션
	 	  @Controller - 해당 빈 클래스가 백엔드 컨트롤러라는 자격을 부여
	 	  @RequestMapping - 백엔드 컨트롤러 내에서 서블릿 요청시 서블릿 패스와 해당 요청을 처리하는 메서드 간 맵핑  
	 	  @ResponseBody : 컨트롤러 메서드의 반환값이 ViewResolver 전달되지 않으며 클라이언트에 전송됨(ajax)
	 	  
	 	3. 컨트롤러 메서드 반환타입
		  String : ViewResolver에 전달 되어질 View의 경로와 이름
		  void : ViewResolver에 전달될 View의 경로와 이름을 클라이언트의 요청시 서블릿패스를 기초로 작성
		  ModelAndView : ViewResolver에 전달될 view의 경로와 이름, 그리고 view에 전달될 Model을 설정
		  Model(Interface) : ViewResolver에 전달되는 view의 경로와 이름 추출은 반환타입 void와 동일하고,
		  		  View에 전달되어지는 Model을 설정
		  ModelMap(Impl구현 클래스) : ViewResolver에 전달되는 view의 경로와 이름 추출은 반환타입 void와 동일하고,
		  		     View에 전달되어지는 ModelMap을 설정
		  
		4. 컨트롤러 메서드 파라메터 선언
		  String : 클라이언트 요청시 쿼리스트링의 키가 일치하는 지역변수 선언시 값을 주입.
		  String[] : 클라이언트 요청시 단일키의 다중값 전송시 값 주입.
		  VO : 클라이언트 요청시 쿼리스트링의 키가 일치하는 VO내의 전역변수의 setter를 대상으로 값을 주입.
		  Map : 파라메터로 선언된 Map의 인스턴스를 주입
		  ModelAndView : 파라메터로 선언된 ModelAndView의 인스턴스를 주입
		  Model : 파라메터로 선언된 Model의 인스턴스를 DI.
		  HttpServletRequest, HttpServletResponse : 리다이렉트 요청시 생성된 request, response 주입
		  HttpSession : 클라이언트에 할당된 세션이 주입
		  @RequestParam : 메서드에 선언된 파라메터에 필수 값 주입.(주입 400에러 발생)
		  			      default requried=true
		  				  requried=true 파라메터값이 주입, null을 허용
		  				  defaultValue 파라메터값이 주입될때 값이 null일때 대체값		  
		  @RequestHeader : 클라이언트의 요청시에 요청 헤더 중 특정 헤더 DI
		  @CookieValue : 클라이언트로부터 전송되는 쿠키의 값 DI
		  			      default requried=true
		  				  requried=true 파라메터값이 주입, null을 허용 (그러므로 없을수도 있을땐 false)
		  				  defaultValue 파라메터값이 주입될때 값이 null일때 대체값	
		  @PathVariable : 클라이언트 요청시 서블릿 패스 내 특정 값 취득
		  RedirectAttribute : 서로 상이한 컨트롤러 메서드 간 리다이렉트 처리시 값 전달
		  @RequestBody : 클라이언트가 요청시 전송되는 쿼리스트링 패턴 그대로 값을 취득				  	  
		5. context : component - scan : base-package속성에 선언된 패키지 하위 전체를 검색하고 @Controller,
		 			 					@Service, @Repository, @Component가 선언된 클래스를 자동으로 인스턴스화 한다.
		 			 					@Controller : Controller Class에 선언
		 			 					@Service : Service layer의 자원에 선언
		 			 					@Repositroy : DAO layer의 자원에 선언
		 			 					@Component : 기타 자원 선언
		 			 					@Autowired : 빈으로 등록된 빈 자원중 타입을 기준으로 동일한 타입의 빈을 DI(Dependency Injection).
		 			 					(Spring)  	  선언범위 - 전역변수, 생성자, 메서드 
		 			 					@Resource : 빈으로 등록된 빈 자원중 타입을 기준으로 동일한 타입의 빈을 DI(Dependency Injection).
		 			 					(JAVA)		선언범위 - 전역변수, 메서드
		 			 					@Required : setter 또는 메서드의 파라메터에 선언되어서 필수 DI되어야함을 의미
		 			 					@PostConstrutor : 메서드 상단에 선언으로 스프링 프레임웍으로부터 해당 빈 클래스가 인스턴스화 되어 생성자 호출 후 콜백
		 			 					(생성자가 둘)
		 			 					@PreDestory : 메서드 상단에 선언으로 해당 빈 클래스가 GC되기 직전에 콜백
	 	bean : id - 해당 설정파일 내 다른 빈과 구분을 위한 구분자 (유니크)
	 		   name - id속성과 동반 선언되면 해당 id의 별명
	 		   	      id속성 생략 후 name속성만 선언시에는 id속성 의미와 동일
	 		   class - 빈으로 등록되어질 실제 존재하는 자원(패)
	 		   scope - singleton(default) 빈의 인스턴스는 단일하게 활용
	 		   		   prototype 빈의 인스턴스를 DI요청시마다 신규 생성
	 		   		   request 동일한 HttpServletRequest 활용시에는 singleton,
	 		   		   		    상이한 HttpServletRequest에는 prototype으로 인스턴스화 
	 		   		   session 동일한 HttpSession 활용시에는 singleton,
	 		   		   		   상이한 HttpServletSession에서는 prototype으로 인스턴스화 
	 -->			
	 <bean id="firstController" name="backendcontroller" 
	 	class="kr.or.ddit.first.controller.FirstController">
	 </bean>
	 
	
</beans>
